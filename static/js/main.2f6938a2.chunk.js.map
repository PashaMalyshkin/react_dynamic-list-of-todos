{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","React","memo","todos","selectTodoId","selectedTodoId","selectUserId","setStatus","selectTodo","className","map","todo","id","completed","classNames","title","type","onClick","userId","TodoFilter","search","searchTodo","filter","onFilter","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","status","onReset","useState","selectedUser","setUser","isLoading","setIsLoading","useEffect","getUser","user","href","email","name","App","visibleTodos","setTodos","searchedTodo","setSearchedTodos","selectedTodo","setSelectedTodo","todoCategory","setTodoCategory","todoId","setTodoId","setUserId","todoStatus","setTodoStatus","resetUser","useCallback","handleSearch","handleFilter","category","handleTodoStatus","filteredTodos","categoryStatus","formattedTitle","toLowerCase","formattedSearch","includes","filterTodos","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f6938a2.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  selectedTodoId: number;\n  selectTodoId: (id :number) => void;\n  selectUserId: (id: number) => void;\n  todos: Todo[];\n  setStatus: (status: boolean) => void;\n  selectTodo: (todo: Todo) => void\n}\nexport const TodoList: React.FC<Props> = React.memo(({\n  todos,\n  selectTodoId,\n  selectedTodoId,\n  selectUserId,\n  setStatus,\n  selectTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n          <td className=\"is-vcentered\">{todo.id}</td>\n          <td className=\"is-vcentered\">\n            {todo.completed && (\n              <span className=\"icon\" data-cy=\"iconCompleted\">\n                <i className=\"fas fa-check\" />\n              </span>\n            )}\n          </td>\n          <td className=\"is-vcentered is-expanded\">\n            <p className={classNames({\n              'has-text-danger': !todo.completed,\n              'has-text-success': todo.completed,\n            })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            {selectedTodoId === todo.id ? (\n              <button\n                data-cy=\"selectButton\"\n                className=\"button is-link\"\n                type=\"button\"\n                onClick={() => selectTodoId(0)}\n              >\n                <span className=\"icon\">\n                  <i className=\"far fa-eye-slash\" />\n                </span>\n              </button>\n            ) : (\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  selectUserId(todo.userId);\n                  selectTodoId(todo.id);\n                  setStatus(todo.completed);\n                  selectTodo(todo);\n                }}\n              >\n                <span className=\"icon\">\n                  <i className=\"far fa-eye\" />\n                </span>\n              </button>\n            )}\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n));\n","import React from 'react';\n\ninterface Props {\n  filter: string;\n  onFilter: CallableFunction;\n  search: string;\n  searchTodo: CallableFunction;\n}\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  search,\n  searchTodo,\n  filter,\n  onFilter,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={filter}\n            onChange={(event) => onFilter(event.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          value={search}\n          onChange={(event) => searchTodo(event.target.value)}\n          placeholder=\"Search...\"\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {search && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => searchTodo('')}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\n\ninterface Props {\n  selectedTodoId: number;\n  todo: Todo | null;\n  status: boolean;\n  onReset: () => void;\n  userId: number;\n}\nexport const TodoModal: React.FC<Props> = React.memo(\n  ({\n    selectedTodoId,\n    todo,\n    status,\n    onReset,\n    userId,\n  }) => {\n    const [selectedUser, setUser] = useState<User | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n      getUser(userId).then(user => {\n        setUser(user);\n        setIsLoading(true);\n      });\n    }, []);\n\n    return (\n      <div\n        className=\"modal is-active\"\n        data-cy=\"modal\"\n      >\n        <div className=\"modal-background\" />\n\n        {!isLoading ? (\n          <Loader />\n        ) : (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${selectedTodoId}`}\n              </div>\n\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={onReset}\n              />\n            </header>\n\n            <div className=\"modal-card-body\">\n              <p className=\"block\" data-cy=\"modal-title\">\n                {todo?.title}\n              </p>\n\n              <p className=\"block\" data-cy=\"modal-user\">\n                {/* <strong className=\"has-text-success\">Done</strong> */}\n                {status ? (\n                  <strong className=\"has-text-success\">Done</strong>\n                ) : (\n                  <strong className=\"has-text-danger\">Planned</strong>\n                )}\n\n                {' by '}\n\n                <a href={`mailto:${selectedUser?.email}`}>\n                  {selectedUser?.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n","/* eslint-disable max-len */\nimport React, { useCallback, useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [visibleTodos, setTodos] = useState<Todo[]>([]);\n  const [searchedTodo, setSearchedTodos] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [todoCategory, setTodoCategory] = useState('All');\n  const [todoId, setTodoId] = useState(0);\n  const [userId, setUserId] = useState(1);\n  const [todoStatus, setTodoStatus] = useState(false);\n\n  // eslint-disable-next-line no-console\n  useEffect(() => {\n    getTodos().then(todos => setTodos(todos));\n  }, []);\n\n  const resetUser = useCallback(() => {\n    setSelectedTodo(null);\n    setTodoId(0);\n  }, []);\n\n  const handleSearch = useCallback((search: string) => {\n    setSearchedTodos(search);\n  }, []);\n\n  const handleFilter = useCallback((category: string) => {\n    setTodoCategory(category);\n  }, []);\n\n  const handleTodoStatus = useCallback((status: boolean) => {\n    setTodoStatus(status);\n  }, []);\n\n  const filterTodos = useCallback((search: string, category: string) => {\n    let categoryStatus: boolean | null = null;\n\n    switch (category) {\n      case 'active':\n        categoryStatus = false;\n        break;\n      case 'completed':\n        categoryStatus = true;\n        break;\n      default:\n        categoryStatus = null;\n    }\n\n    return visibleTodos.filter(todo => {\n      const formattedTitle = todo.title.toLowerCase();\n      const formattedSearch = search.toLowerCase();\n\n      if (categoryStatus !== null) {\n        return formattedTitle.includes(formattedSearch)\n          && todo.completed === categoryStatus;\n      }\n\n      return formattedTitle.includes(formattedSearch);\n    });\n  }, [searchedTodo, todoCategory, visibleTodos]);\n\n  const filteredTodos = filterTodos(searchedTodo, todoCategory);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                filter={todoCategory}\n                onFilter={handleFilter}\n                search={searchedTodo}\n                searchTodo={handleSearch}\n              />\n            </div>\n\n            <div className=\"block\">\n              {visibleTodos.length > 0 || <Loader />}\n              <TodoList\n                selectedTodoId={todoId}\n                selectTodoId={(id: number) => setTodoId(id)}\n                selectUserId={(id: number) => setUserId((id))}\n                todos={filteredTodos}\n                setStatus={(status: boolean) => handleTodoStatus(status)}\n                selectTodo={(todo: Todo) => setSelectedTodo(todo)}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodoId={todoId}\n          status={todoStatus}\n          onReset={resetUser}\n          userId={userId}\n          todo={selectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}